/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.toitlang.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import lombok.AllArgsConstructor;import lombok.Data;import org.toitlang.intellij.psi.ToitTypes;
import com.intellij.psi.TokenType;
import java.util.Stack;
import com.intellij.lexer.FlexLexer;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Toit.flex</tt>
 */
class ToitLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENT_TRACKING = 2;
  public static final int STRING_PARSING = 4;
  public static final int TRIPLE_STRING_PARSING = 6;
  public static final int INLINE_STRING_EXPRESSION = 8;
  public static final int INLINE_DELIMITED_STRING_EXPRESSION = 10;
  public static final int NORMAL = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15232 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\1\1\7\12\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\21\12\12\1\23"+
    "\1\12\1\24\1\23\1\12\1\25\1\23\1\12\1\26\1\27\1\12\1\30\1\31\1\1\1\30\4\12"+
    "\1\32\6\12\1\33\1\34\1\35\1\1\3\12\1\36\6\12\1\15\3\12\1\37\2\12\1\40\1\1"+
    "\1\12\1\41\4\1\1\12\1\42\1\1\1\43\1\21\7\12\1\44\1\23\1\33\1\45\1\34\1\46"+
    "\1\47\1\50\1\44\1\15\1\51\1\45\1\34\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\34"+
    "\1\60\1\61\1\62\1\44\1\63\1\64\1\45\1\34\1\60\1\65\1\66\1\44\1\67\1\70\1\71"+
    "\1\72\1\32\1\73\1\74\1\55\1\1\1\75\1\76\1\34\1\77\1\100\1\101\1\44\1\1\1\75"+
    "\1\76\1\34\1\102\1\100\1\103\1\44\1\104\1\105\1\76\1\12\1\36\1\106\1\107\1"+
    "\44\1\110\1\111\1\112\1\12\1\113\1\114\1\115\1\55\1\116\1\23\2\12\1\30\1\117"+
    "\1\120\2\1\1\121\1\122\1\123\1\124\1\125\1\126\2\1\1\62\1\127\1\120\1\130"+
    "\1\131\1\12\1\132\1\23\1\133\1\131\1\12\1\132\1\134\3\1\4\12\1\120\4\12\1"+
    "\40\2\12\1\135\2\12\1\136\24\12\1\137\1\140\2\12\1\137\2\12\1\141\1\142\1"+
    "\13\3\12\1\142\3\12\1\36\2\1\1\12\1\1\5\12\1\143\1\23\45\12\1\35\1\12\1\23"+
    "\1\30\4\12\1\144\1\145\1\146\1\147\1\12\1\147\1\12\1\150\1\146\1\151\5\12"+
    "\1\152\1\120\1\1\1\153\1\120\5\12\1\25\2\12\1\30\4\12\1\56\1\12\1\117\2\41"+
    "\1\55\1\12\1\40\1\147\2\12\1\41\1\12\2\120\2\1\1\12\1\41\3\12\1\117\1\12\1"+
    "\35\2\120\1\154\1\117\4\1\4\12\1\41\1\120\1\155\1\150\7\12\1\150\3\12\1\25"+
    "\1\77\2\12\1\40\1\145\4\1\1\156\1\12\1\157\17\12\1\160\21\12\1\143\2\12\1"+
    "\143\1\161\1\12\1\40\3\12\1\162\1\163\1\164\1\132\1\163\3\1\1\165\1\62\1\166"+
    "\1\1\1\167\1\1\1\132\3\1\2\12\1\62\1\170\1\171\1\172\1\126\1\173\1\1\2\12"+
    "\1\145\62\1\1\55\2\12\1\120\161\1\2\12\1\117\2\12\1\117\10\12\1\174\1\150"+
    "\2\12\1\135\3\12\1\175\1\165\1\12\1\176\4\177\2\12\2\1\1\165\35\1\1\200\1"+
    "\1\1\23\1\201\1\23\4\12\1\202\1\23\4\12\1\136\1\203\1\12\1\40\1\23\4\12\1"+
    "\117\1\1\1\12\1\30\3\1\1\12\40\1\133\12\1\56\4\1\135\12\1\56\2\1\10\12\1\132"+
    "\4\1\2\12\1\40\20\12\1\132\1\12\1\41\1\1\3\12\1\204\7\12\1\15\1\1\1\205\1"+
    "\206\5\12\1\207\1\12\1\117\1\25\3\1\1\205\2\12\1\25\1\1\3\12\1\150\4\12\1"+
    "\56\1\120\1\12\1\210\2\12\1\40\2\12\1\150\1\12\1\132\4\12\1\211\1\120\1\12"+
    "\1\117\3\12\1\176\1\40\1\120\1\12\1\112\4\12\1\31\1\153\1\12\1\212\1\213\1"+
    "\214\1\177\2\12\1\136\1\56\7\12\1\215\1\120\72\12\1\150\1\12\1\216\2\12\1"+
    "\41\20\1\26\12\1\40\6\12\1\120\2\1\1\176\1\217\1\34\1\220\1\221\6\12\1\15"+
    "\1\1\1\222\25\12\1\40\1\1\4\12\1\206\2\12\1\25\2\1\1\41\1\12\1\1\1\12\1\223"+
    "\1\224\2\1\1\133\7\12\1\132\1\1\1\120\1\23\1\225\1\23\1\30\1\55\4\12\1\117"+
    "\1\226\1\227\2\1\1\230\1\12\1\13\1\231\2\40\2\1\7\12\1\30\4\1\3\12\1\147\7"+
    "\1\1\232\10\1\1\12\1\132\3\12\2\62\1\1\2\12\1\1\1\12\1\30\2\12\1\30\1\12\1"+
    "\40\2\12\1\233\1\234\2\1\11\12\1\40\1\120\2\12\1\233\1\12\1\41\2\12\1\25\3"+
    "\12\1\150\11\1\23\12\1\176\1\12\1\56\1\25\11\1\1\235\2\12\1\236\1\12\1\56"+
    "\1\12\1\176\1\12\1\117\4\1\1\12\1\237\1\12\1\56\1\12\1\120\4\1\3\12\1\240"+
    "\4\1\1\241\1\242\1\12\1\243\2\1\1\12\1\132\1\12\1\132\2\1\1\131\1\12\1\176"+
    "\1\1\3\12\1\56\1\12\1\56\1\12\1\31\1\12\1\15\6\1\4\12\1\145\3\1\3\12\1\31"+
    "\3\12\1\31\60\1\4\12\1\176\1\1\1\55\1\165\3\12\1\30\1\1\1\12\1\145\1\120\3"+
    "\12\1\133\1\1\2\12\1\244\4\12\1\245\1\246\2\1\1\12\1\21\1\12\1\247\4\1\1\250"+
    "\1\26\1\145\3\12\1\30\1\120\1\33\1\45\1\34\1\60\1\65\1\251\1\252\1\147\10"+
    "\1\4\12\1\30\1\120\2\1\4\12\1\253\1\120\12\1\3\12\1\254\1\62\1\255\2\1\4\12"+
    "\1\256\1\120\2\1\3\12\1\25\1\120\3\1\1\12\1\77\1\41\1\120\26\1\4\12\1\120"+
    "\1\165\34\1\3\12\1\145\20\1\1\34\2\12\1\13\1\62\1\120\1\1\1\206\1\12\1\206"+
    "\1\131\1\176\64\1\71\12\1\120\6\1\6\12\1\117\1\1\14\12\1\150\53\1\2\12\1\117"+
    "\75\1\44\12\1\176\33\1\43\12\1\145\1\12\1\117\1\120\6\1\1\12\1\40\1\147\3"+
    "\12\1\176\1\150\1\120\1\222\1\257\1\12\67\1\4\12\1\147\2\12\1\117\1\165\1"+
    "\12\4\1\1\62\1\1\76\12\1\132\1\1\57\12\1\31\20\1\1\15\77\1\6\12\1\30\1\132"+
    "\1\145\1\260\114\1\1\261\1\262\1\263\1\1\1\264\11\1\1\265\33\1\5\12\1\133"+
    "\3\12\1\146\1\266\1\267\1\270\3\12\1\271\1\272\1\12\1\273\1\274\1\76\24\12"+
    "\1\254\1\12\1\76\1\136\1\12\1\136\1\12\1\133\1\12\1\133\1\117\1\12\1\117\1"+
    "\12\1\34\1\12\1\34\1\12\1\275\3\12\40\1\3\12\1\216\2\12\1\132\1\276\1\166"+
    "\1\155\1\23\25\1\1\13\1\207\1\277\75\1\14\12\1\147\1\176\2\1\4\12\1\30\1\120"+
    "\112\1\1\270\1\12\1\300\1\301\1\302\1\303\1\304\1\305\1\306\1\41\1\307\1\41"+
    "\47\1\1\12\1\120\1\12\1\120\1\12\1\120\47\1\55\12\1\176\2\1\103\12\1\147\15"+
    "\12\1\40\150\12\1\15\25\1\41\12\1\40\56\1\17\12\41\1");

  /* The ZZ_CMAP_A table has 3200 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\42\1\2\1\0\1\41\1\1\22\0\1\11\1\61\1\76\1\55\1\103\1\10\1\45\1\12"+
    "\1\77\1\100\1\4\1\27\1\56\1\6\1\25\1\3\1\13\1\17\6\15\2\14\1\51\1\52\1\43"+
    "\1\53\1\44\1\50\1\0\1\16\1\24\2\16\1\26\1\16\10\5\1\23\10\5\1\20\2\5\1\101"+
    "\1\7\1\102\1\47\1\21\1\0\1\35\1\64\1\65\1\74\1\33\1\34\1\5\1\73\1\62\1\5\1"+
    "\66\1\36\1\70\1\40\1\63\1\22\1\5\1\31\1\37\1\30\1\32\1\75\1\72\1\71\1\67\1"+
    "\5\1\57\1\54\1\60\1\46\13\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0\12\5\4\0\14"+
    "\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5\1\0\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3"+
    "\5\1\0\1\5\1\0\4\5\1\0\23\5\1\0\11\5\1\0\26\5\2\0\1\5\6\0\10\5\10\0\16\5\1"+
    "\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5\10\0\13\5\5\0\3\5\15\0\12\5\4\0\6\5\1\0\10"+
    "\5\2\0\12\5\1\0\23\5\2\0\14\5\2\0\11\5\4\0\1\5\5\0\16\5\2\0\14\5\4\0\5\5\1"+
    "\0\10\5\6\0\20\5\2\0\13\5\2\0\16\5\1\0\1\5\3\0\4\5\2\0\11\5\2\0\2\5\2\0\4"+
    "\5\10\0\1\5\4\0\2\5\1\0\1\5\1\0\3\5\1\0\6\5\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2"+
    "\5\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5\3\0\1\5\7\0\4\5\1\0\1\5\7\0\20\5\13\0\3"+
    "\5\1\0\11\5\1\0\2\5\1\0\2\5\1\0\5\5\2\0\12\5\1\0\3\5\1\0\3\5\2\0\1\5\30\0"+
    "\1\5\7\0\3\5\1\0\10\5\2\0\6\5\2\0\2\5\2\0\3\5\10\0\2\5\4\0\2\5\1\0\1\5\1\0"+
    "\1\5\20\0\2\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0"+
    "\3\5\3\0\5\5\3\0\3\5\1\0\4\5\2\0\1\5\6\0\1\5\10\0\4\5\1\0\10\5\1\0\3\5\1\0"+
    "\30\5\3\0\10\5\1\0\3\5\1\0\4\5\7\0\2\5\1\0\3\5\5\0\4\5\1\0\5\5\2\0\4\5\5\0"+
    "\2\5\7\0\1\5\2\0\2\5\16\0\3\5\1\0\10\5\1\0\7\5\1\0\3\5\1\0\5\5\5\0\4\5\7\0"+
    "\1\5\12\0\6\5\2\0\2\5\1\0\22\5\3\0\10\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\5\4"+
    "\0\6\5\1\0\1\5\1\0\10\5\2\0\2\5\14\0\17\5\1\0\12\5\7\0\2\5\1\0\1\5\2\0\2\5"+
    "\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\15\5"+
    "\1\0\3\5\2\0\5\5\1\0\1\5\1\0\6\5\2\0\12\5\2\0\4\5\10\0\2\5\13\0\1\5\1\0\1"+
    "\5\1\0\1\5\4\0\12\5\1\0\24\5\3\0\5\5\1\0\12\5\6\0\1\5\11\0\6\5\1\0\1\5\5\0"+
    "\1\5\2\0\13\5\1\0\15\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\1\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\16\5\2\0\6\5\2\0\13\5\3\0\13\5\7\0\15\5\1\0\7\5\13"+
    "\0\4\5\14\0\1\5\1\0\2\5\14\0\4\5\3\0\1\5\4\0\2\5\15\0\3\5\11\0\1\5\23\0\10"+
    "\5\1\0\23\5\1\0\2\5\6\0\6\5\5\0\15\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\6\5\1\0\7"+
    "\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\23\0\1\5\4\0\1\5\14\0\1\5\15\0"+
    "\1\5\2\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\1\5\5\0\5\5\4\0\1\5\1\0\5\5\6\0\15\5\7\0\10\5\11\0\7\5\1\0\7\5\6"+
    "\0\3\5\11\0\5\5\2\0\5\5\3\0\7\5\2\0\2\5\2\0\3\5\5\0\16\5\1\0\12\5\1\0\1\5"+
    "\7\0\11\5\2\0\27\5\2\0\15\5\3\0\1\5\1\0\1\5\2\0\1\5\16\0\1\5\2\0\5\5\12\0"+
    "\6\5\2\0\6\5\2\0\6\5\11\0\13\5\1\0\2\5\2\0\7\5\4\0\5\5\3\0\5\5\5\0\12\5\1"+
    "\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\12\5\3\0\15\5\3\0\2\5\30\0\16\5\4\0\1\5"+
    "\2\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\14\5\1\0\16\5\1\0\2\5\1\0\1\5\15\0\1"+
    "\5\2\0\4\5\4\0\10\5\1\0\5\5\12\0\6\5\2\0\1\5\1\0\14\5\1\0\2\5\3\0\1\5\2\0"+
    "\4\5\1\0\2\5\12\0\10\5\6\0\6\5\1\0\2\5\5\0\10\5\1\0\3\5\1\0\13\5\4\0\3\5\4"+
    "\0\5\5\2\0\1\5\11\0\5\5\5\0\3\5\3\0\13\5\1\0\1\5\3\0\10\5\6\0\1\5\1\0\7\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\6\0\1\5\5\0\7\5\2\0\7\5\3\0\6\5\1\0\1\5\10\0\6\5"+
    "\2\0\10\5\10\0\6\5\2\0\1\5\3\0\1\5\13\0\10\5\5\0\15\5\3\0\2\5\6\0\5\5\3\0"+
    "\6\5\10\0\10\5\2\0\7\5\16\0\4\5\4\0\3\5\15\0\1\5\2\0\2\5\2\0\4\5\1\0\14\5"+
    "\1\0\1\5\1\0\7\5\1\0\21\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0\14\5\1\0\4\5\1\0\5"+
    "\5\1\0\1\5\3\0\11\5\1\0\10\5\2\0\2\5\5\0\1\5\12\0\2\5\1\0\2\5\1\0\5\5\6\0"+
    "\2\5\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1\5\4\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1"+
    "\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5\1\0\12\5\1\0\5"+
    "\5\1\0\3\5\1\0\5\5\1\0\5\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\2\1\1\2\2\3\1\4\1\5"+
    "\1\3\1\6\1\7\1\6\1\10\1\11\2\12\1\13"+
    "\1\14\1\15\1\11\1\16\1\11\2\17\1\11\1\20"+
    "\7\7\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\11"+
    "\5\7\1\37\1\40\1\41\1\42\1\43\2\44\1\45"+
    "\1\46\1\47\1\50\1\51\2\0\1\52\1\3\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\2\0\1\17"+
    "\5\7\1\0\2\7\1\62\1\63\1\64\1\65\7\7"+
    "\1\66\5\7\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\0\1\101\1\102\1\103"+
    "\1\7\1\104\4\7\4\0\2\105\1\7\1\17\1\7"+
    "\1\17\1\7\1\17\1\7\1\62\1\7\1\62\1\0"+
    "\2\53\1\7\1\106\5\7\1\107\1\7\1\110\3\7"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\2\0\5\7"+
    "\1\117\2\0\1\51\1\0\1\52\1\7\1\0\1\62"+
    "\1\53\1\62\1\120\1\7\1\121\5\7\1\122\1\123"+
    "\2\0\5\7\1\51\2\0\1\7\2\17\6\7\2\0"+
    "\1\7\1\124\1\125\1\7\1\126\1\0\1\51\1\0"+
    "\1\7\1\127\1\130\1\7\1\131\1\7\1\132\1\0"+
    "\1\133\1\134\1\7\3\0\1\51\1\135\1\7\1\0"+
    "\1\7\1\0\1\136\1\0\1\137\1\51\1\0\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0198\0\u0220\0\u0264\0\u02a8\0\u0198\0\u02ec\0\u0198\0\u0330"+
    "\0\u0374\0\u0198\0\u03b8\0\u03fc\0\u0198\0\u0198\0\u0440\0\u0198"+
    "\0\u0484\0\u04c8\0\u050c\0\u0264\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0198\0\u0990\0\u0198\0\u09d4"+
    "\0\u0198\0\u0a18\0\u0a5c\0\u0aa0\0\u0198\0\u0198\0\u0198\0\u0ae4"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0198\0\u0198"+
    "\0\u0198\0\u0198\0\u0cc0\0\u0198\0\u0198\0\u0198\0\u0198\0\u0198"+
    "\0\u0d04\0\u0d48\0\u0264\0\u0d8c\0\u0dd0\0\u0e14\0\u0198\0\u0198"+
    "\0\u0198\0\u0198\0\u0198\0\u0198\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144"+
    "\0\u0198\0\u0198\0\u0198\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298"+
    "\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\u0198\0\u1540\0\u0198\0\u0198\0\u0198\0\u1584\0\u0198"+
    "\0\u0198\0\u0198\0\u15c8\0\u0198\0\u03b8\0\u160c\0\u1650\0\u03b8"+
    "\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870"+
    "\0\u0198\0\u0e58\0\u18b4\0\u18f8\0\u193c\0\u0ff0\0\u1980\0\u1034"+
    "\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0"+
    "\0\u03b8\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u03b8\0\u1d38"+
    "\0\u03b8\0\u1d7c\0\u1dc0\0\u1e04\0\u03b8\0\u0198\0\u0198\0\u1e48"+
    "\0\u0198\0\u0198\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u0198\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u1870\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u03b8\0\u22cc\0\u03b8\0\u2310"+
    "\0\u2354\0\u2398\0\u23dc\0\u2420\0\u03b8\0\u0198\0\u2464\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u0198\0\u20f0\0\u2640"+
    "\0\u2684\0\u03b8\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c"+
    "\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u03b8\0\u03b8\0\u2970\0\u03b8"+
    "\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u03b8\0\u03b8\0\u2ac4\0\u03b8"+
    "\0\u2b08\0\u03b8\0\u2b4c\0\u0198\0\u03b8\0\u2b90\0\u2bd4\0\u29f8"+
    "\0\u2c18\0\u20ac\0\u03b8\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u03b8"+
    "\0\u2d6c\0\u03b8\0\u29b4\0\u2db0\0\u0198";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\3\7\1\13\1\7\1\14"+
    "\27\7\2\14\41\7\7\15\1\16\66\15\1\17\4\15"+
    "\1\20\7\15\1\16\66\15\1\21\4\15\1\20\5\22"+
    "\1\23\5\22\12\23\1\24\1\23\1\22\11\23\21\22"+
    "\14\23\3\22\1\25\2\22\1\26\1\27\1\30\1\31"+
    "\1\32\1\23\1\33\1\34\1\35\1\14\1\36\1\37"+
    "\2\40\1\23\1\40\5\23\1\41\1\23\1\42\1\43"+
    "\1\44\1\23\1\45\1\46\1\47\1\23\1\50\1\51"+
    "\2\14\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\4\23\1\75\3\23\1\76"+
    "\1\77\1\100\1\101\1\102\2\26\1\103\1\104\1\31"+
    "\1\32\1\23\1\33\1\34\1\35\1\14\1\36\1\37"+
    "\2\40\1\23\1\40\5\23\1\41\1\23\1\42\1\43"+
    "\1\44\1\23\1\45\1\46\1\47\1\23\1\50\1\51"+
    "\2\14\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\4\23\1\75\3\23\1\76"+
    "\1\105\1\106\1\107\1\110\1\26\106\0\1\11\104\0"+
    "\1\111\1\112\101\0\1\14\110\0\1\113\1\0\1\14"+
    "\27\0\2\14\41\0\1\15\2\0\101\15\77\0\1\114"+
    "\102\0\1\115\12\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\11\23\21\0\14\23\13\0\1\116\5\0\12\116"+
    "\1\0\1\116\1\0\11\116\21\0\14\116\10\0\1\30"+
    "\104\0\1\111\1\112\46\0\1\117\103\0\1\120\36\0"+
    "\1\121\35\0\1\122\6\0\1\123\103\0\1\124\30\0"+
    "\7\125\1\126\2\125\1\0\71\125\5\0\2\23\4\0"+
    "\1\127\1\130\1\127\1\23\1\127\1\131\1\132\1\23"+
    "\1\133\1\134\1\135\1\136\1\0\3\23\1\136\5\23"+
    "\21\0\1\23\1\133\1\134\4\23\1\131\4\23\13\0"+
    "\2\23\4\0\3\40\1\23\1\40\1\23\1\137\3\23"+
    "\1\135\1\136\1\0\3\23\1\136\5\23\21\0\14\23"+
    "\13\0\1\116\5\0\3\140\1\116\1\140\5\116\1\141"+
    "\1\116\1\0\11\116\21\0\14\116\35\0\1\142\23\0"+
    "\1\143\35\0\2\23\4\0\12\23\1\0\1\23\1\0"+
    "\1\23\1\144\7\23\21\0\14\23\13\0\2\23\4\0"+
    "\12\23\1\0\1\23\1\0\3\23\1\145\5\23\21\0"+
    "\14\23\13\0\2\23\4\0\12\23\1\0\1\23\1\0"+
    "\6\23\1\146\2\23\21\0\7\23\1\147\4\23\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\5\23\1\150"+
    "\3\23\21\0\1\151\1\152\12\23\13\0\2\23\4\0"+
    "\12\23\1\0\1\23\1\0\7\23\1\153\1\154\21\0"+
    "\2\23\1\155\11\23\13\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\1\156\10\23\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\2\23\1\157\6\23"+
    "\21\0\1\23\1\160\12\23\51\0\1\161\7\0\1\162"+
    "\74\0\1\163\6\0\1\164\103\0\1\165\103\0\1\166"+
    "\101\0\1\167\1\0\1\170\103\0\1\171\103\0\1\172"+
    "\52\0\1\173\134\0\1\174\35\0\2\23\4\0\12\23"+
    "\1\0\1\23\1\0\4\23\1\175\2\23\1\176\1\23"+
    "\21\0\6\23\1\177\5\23\13\0\2\23\4\0\12\23"+
    "\1\0\1\23\1\0\1\23\1\200\7\23\21\0\14\23"+
    "\13\0\2\23\4\0\12\23\1\0\1\23\1\0\1\23"+
    "\1\201\7\23\21\0\14\23\13\0\2\23\4\0\12\23"+
    "\1\0\1\23\1\0\6\23\1\202\2\23\21\0\1\23"+
    "\1\203\12\23\13\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\11\23\21\0\11\23\1\204\2\23\104\0\1\205"+
    "\7\0\1\104\101\0\1\111\2\0\101\111\4\206\1\207"+
    "\77\206\10\0\1\210\171\0\1\17\12\0\2\116\4\0"+
    "\12\116\1\0\1\116\1\0\11\116\21\0\14\116\20\0"+
    "\1\211\71\0\1\125\2\0\7\125\1\212\71\125\5\0"+
    "\2\23\4\0\1\127\1\130\1\127\1\23\1\127\1\23"+
    "\1\132\3\23\1\135\1\136\1\0\3\23\1\136\5\23"+
    "\21\0\14\23\13\0\2\23\4\0\3\130\1\23\1\130"+
    "\1\23\1\213\3\23\1\135\1\136\1\0\3\23\1\136"+
    "\5\23\21\0\14\23\13\0\2\23\4\0\5\214\1\23"+
    "\1\215\2\23\1\214\1\0\1\214\1\0\3\23\3\214"+
    "\3\23\21\0\2\23\2\214\6\23\1\214\1\23\13\0"+
    "\2\23\4\0\1\127\1\130\1\127\1\23\1\127\5\23"+
    "\1\0\1\23\1\0\11\23\21\0\14\23\13\0\2\23"+
    "\4\0\1\216\1\23\1\216\1\23\1\216\1\23\1\217"+
    "\3\23\1\0\1\23\1\0\11\23\21\0\14\23\13\0"+
    "\2\23\4\0\1\220\3\23\1\220\1\23\1\221\3\23"+
    "\1\0\1\23\1\0\11\23\21\0\14\23\21\0\3\222"+
    "\1\0\1\222\71\0\1\23\1\223\4\0\3\224\1\23"+
    "\1\224\5\23\1\0\1\23\1\225\11\23\21\0\14\23"+
    "\13\0\2\23\4\0\3\40\1\23\1\40\5\23\1\0"+
    "\1\23\1\0\11\23\21\0\14\23\13\0\2\116\4\0"+
    "\3\140\1\116\1\140\1\116\1\226\3\116\1\0\1\227"+
    "\1\0\3\116\1\227\5\116\21\0\14\116\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\2\23\1\230\6\23"+
    "\21\0\5\23\1\231\6\23\13\0\2\23\4\0\12\23"+
    "\1\0\1\23\1\0\1\232\10\23\21\0\14\23\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\7\23\1\233"+
    "\1\23\21\0\14\23\13\0\2\23\4\0\7\23\1\234"+
    "\2\23\1\0\1\23\1\0\11\23\21\0\14\23\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\6\23\1\235"+
    "\2\23\21\0\14\23\13\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\10\23\1\236\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\1\23\1\237\7\23"+
    "\21\0\14\23\13\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\7\23\1\240\1\23\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\11\23\21\0\12\23"+
    "\1\241\1\23\13\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\7\23\1\242\1\23\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\5\23\1\243\3\23"+
    "\21\0\14\23\13\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\6\23\1\244\2\23\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\1\245\10\23\21\0"+
    "\14\23\51\0\1\246\7\0\1\247\74\0\1\250\6\0"+
    "\1\251\103\0\1\252\61\0\1\253\57\0\2\23\2\0"+
    "\1\254\1\0\12\23\1\0\1\23\1\0\11\23\1\0"+
    "\1\254\17\0\14\23\13\0\2\23\4\0\7\23\1\255"+
    "\2\23\1\0\1\23\1\0\11\23\21\0\14\23\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\3\23\1\256"+
    "\5\23\21\0\14\23\13\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\5\23\1\257\3\23\21\0\14\23\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\10\23\1\260"+
    "\21\0\14\23\13\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\11\23\21\0\1\261\13\23\104\0\1\262\5\0"+
    "\4\206\1\263\77\206\3\264\1\265\1\266\77\264\11\267"+
    "\1\0\72\267\5\0\2\23\4\0\3\130\1\23\1\130"+
    "\5\23\1\0\1\23\1\0\11\23\21\0\14\23\13\0"+
    "\2\23\4\0\5\214\1\23\1\215\1\270\1\23\1\214"+
    "\1\0\1\214\1\0\3\23\3\214\3\23\21\0\2\23"+
    "\2\214\6\23\1\214\1\23\13\0\2\23\4\0\5\214"+
    "\4\23\1\214\1\0\1\214\1\0\3\23\3\214\3\23"+
    "\21\0\2\23\2\214\6\23\1\214\1\23\13\0\2\23"+
    "\4\0\1\216\1\23\1\216\1\23\1\216\5\23\1\0"+
    "\1\23\1\0\11\23\21\0\14\23\13\0\2\23\4\0"+
    "\1\220\3\23\1\220\5\23\1\0\1\23\1\0\11\23"+
    "\21\0\14\23\21\0\3\222\1\0\1\222\1\0\1\135"+
    "\4\0\1\271\4\0\1\271\55\0\2\23\4\0\3\224"+
    "\1\23\1\224\5\23\1\0\1\23\1\0\11\23\21\0"+
    "\14\23\13\0\2\23\4\0\3\224\1\23\1\224\1\23"+
    "\1\223\3\23\1\0\1\23\1\0\11\23\21\0\14\23"+
    "\21\0\3\272\1\0\1\272\71\0\2\116\4\0\3\140"+
    "\1\116\1\140\5\116\1\0\1\116\1\0\11\116\21\0"+
    "\14\116\13\0\1\116\1\273\4\0\3\274\1\116\1\274"+
    "\5\116\1\0\1\116\1\225\11\116\21\0\14\116\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\3\23\1\275"+
    "\5\23\21\0\14\23\13\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\2\23\1\276\6\23\21\0\14\23\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\3\23\1\277"+
    "\5\23\21\0\14\23\13\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\11\23\21\0\1\23\1\300\12\23\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\7\23\1\230"+
    "\1\23\21\0\14\23\13\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\5\23\1\301\3\23\21\0\14\23\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\3\23\1\302"+
    "\5\23\21\0\14\23\13\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\1\303\10\23\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\1\304\10\23\21\0"+
    "\14\23\13\0\2\23\4\0\12\23\1\0\1\23\1\0"+
    "\6\23\1\305\2\23\21\0\14\23\61\0\1\306\112\0"+
    "\1\307\32\0\1\254\26\0\1\310\1\0\1\254\46\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\11\23\21\0"+
    "\1\23\1\311\12\23\13\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\5\23\1\312\3\23\21\0\14\23\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\7\23\1\313"+
    "\1\23\21\0\14\23\13\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\1\314\10\23\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\6\23\1\315\2\23"+
    "\21\0\14\23\6\0\3\206\1\316\1\263\77\206\3\264"+
    "\1\317\1\266\102\264\1\317\1\320\102\264\1\316\1\266"+
    "\77\264\5\0\1\23\1\321\4\0\1\322\2\323\1\23"+
    "\1\323\5\23\1\0\1\23\1\0\11\23\21\0\14\23"+
    "\14\0\1\225\4\0\3\272\1\0\1\272\7\0\1\225"+
    "\67\0\3\272\1\0\1\272\1\0\1\225\67\0\2\116"+
    "\4\0\3\274\1\116\1\274\5\116\1\0\1\116\1\0"+
    "\11\116\21\0\14\116\13\0\2\116\4\0\3\274\1\116"+
    "\1\274\1\116\1\273\3\116\1\0\1\116\1\0\11\116"+
    "\21\0\14\116\13\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\1\23\1\324\7\23\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\1\23\1\325\7\23"+
    "\21\0\14\23\13\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\6\23\1\326\2\23\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\1\23\1\327\7\23"+
    "\21\0\14\23\13\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\1\23\1\330\7\23\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\11\23\21\0\1\331"+
    "\13\23\76\0\1\332\76\0\1\333\25\0\2\23\4\0"+
    "\12\23\1\0\1\23\1\0\1\23\1\334\7\23\21\0"+
    "\14\23\13\0\2\23\4\0\12\23\1\0\1\23\1\0"+
    "\11\23\21\0\4\23\1\335\7\23\13\0\2\23\4\0"+
    "\12\23\1\0\1\23\1\0\7\23\1\336\1\23\21\0"+
    "\14\23\13\0\2\23\4\0\12\23\1\0\1\23\1\0"+
    "\11\23\21\0\1\337\13\23\13\0\2\23\4\0\12\23"+
    "\1\0\1\23\1\0\3\23\1\340\5\23\21\0\14\23"+
    "\6\0\3\341\1\342\1\343\77\341\5\0\2\23\4\0"+
    "\1\322\2\323\1\23\1\323\5\23\1\0\1\23\1\0"+
    "\11\23\21\0\14\23\13\0\2\23\4\0\3\323\1\23"+
    "\1\323\1\23\1\344\3\23\1\0\1\23\1\0\11\23"+
    "\21\0\14\23\13\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\10\23\1\345\21\0\14\23\13\0\2\23\4\0"+
    "\12\23\1\0\1\23\1\0\1\346\10\23\21\0\14\23"+
    "\13\0\2\23\4\0\12\23\1\0\1\23\1\0\6\23"+
    "\1\347\2\23\21\0\14\23\13\0\2\23\4\0\12\23"+
    "\1\0\1\23\1\0\1\350\10\23\21\0\14\23\13\0"+
    "\2\23\4\0\12\23\1\0\1\23\1\0\5\23\1\351"+
    "\3\23\21\0\14\23\13\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\11\23\21\0\3\23\1\352\10\23\70\0"+
    "\1\353\51\0\1\354\60\0\2\23\4\0\12\23\1\0"+
    "\1\23\1\0\1\355\10\23\21\0\14\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\10\23\1\356\21\0"+
    "\14\23\6\0\3\341\1\357\1\343\77\341\4\360\1\361"+
    "\77\360\3\341\1\362\1\343\77\341\5\0\2\23\4\0"+
    "\3\323\1\23\1\323\5\23\1\0\1\23\1\0\11\23"+
    "\21\0\14\23\13\0\2\23\4\0\12\23\1\0\1\23"+
    "\1\0\11\23\21\0\5\23\1\363\6\23\13\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\11\23\21\0\3\23"+
    "\1\364\10\23\36\0\1\365\60\0\2\23\4\0\12\23"+
    "\1\0\1\23\1\0\2\23\1\366\6\23\21\0\14\23"+
    "\6\0\3\341\1\357\1\367\77\341\3\360\1\264\1\361"+
    "\77\360\5\0\2\23\4\0\12\23\1\0\1\23\1\0"+
    "\1\370\10\23\21\0\14\23\70\0\1\371\26\0\2\23"+
    "\4\0\12\23\1\0\1\23\1\0\3\23\1\372\5\23"+
    "\21\0\14\23\6\0\3\341\1\373\1\343\77\341\75\0"+
    "\1\374\41\0\1\375\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11764];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\2\11\1\1\1\11\24\1\1\11"+
    "\1\1\1\11\1\1\1\11\3\1\3\11\7\1\4\11"+
    "\1\1\5\11\1\1\2\0\3\1\6\11\2\0\6\1"+
    "\1\0\3\1\3\11\16\1\1\11\1\1\3\11\1\1"+
    "\3\11\1\0\1\11\10\1\4\0\1\11\13\1\1\0"+
    "\20\1\2\11\1\1\2\11\2\0\5\1\1\11\2\0"+
    "\1\1\1\0\2\1\1\0\14\1\1\11\2\0\5\1"+
    "\1\11\2\0\11\1\2\0\5\1\1\0\1\1\1\0"+
    "\7\1\1\0\1\11\2\1\3\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
            boolean trackIndents;
            int yyline;
            int yycolumn;

            Stack<Integer> indentStack = new Stack<>();

            public void setTrackIndents(boolean trackIndents) { this.trackIndents = trackIndents; }

            public int getIndenStackSize() { return indentStack.size(); }

            IElementType indentOut() {
                indentStack.pop();
                return ToitTypes.DEDENT;
            }
            IElementType indentIn() {
                indentStack.push(yycolumn);
                yybegin(NORMAL);
                return ToitTypes.INDENT;
            }
            IElementType indentIgnore() {
                yybegin(NORMAL);
                return null;
            }

            IElementType handleIndent() {
               yypushback(1);
               if (!trackIndents) return indentIgnore();

               if (indentStack.isEmpty()) {
                  if (yycolumn > 0) {
                      // No indents recorded and non-space in first column. Record indent and return to normal mode
                      return indentIn();
                  }
                  return indentIgnore();
               }

               int previousIndent = indentStack.peek();
               if (previousIndent == yycolumn) {
                   // At same indentation level, so return to normal mode
                   return indentIgnore();
               }

               if (previousIndent < yycolumn) {
                   // Indent in detected, record it on the stack
                   return indentIn();
               }

               // Indent out
               return indentOut();
            };

            IElementType handleEof() {
                if (!trackIndents) {
                    switch (yystate()) {
                        case YYINITIAL:
                        case NORMAL:
                            return null;
                        default:
                            yybegin(NORMAL);
                            return TokenType.BAD_CHARACTER;
                    }
                } else {
                    switch (yystate()) {
                        case NORMAL:
                        case YYINITIAL:
                            yybegin(INDENT_TRACKING);
                            return ToitTypes.NEWLINE;
                        case INDENT_TRACKING:
                            if (indentStack.isEmpty()) return null;
                            indentStack.pop();
                            return ToitTypes.DEDENT;
                        default:
                            yybegin(NORMAL);
                            return TokenType.BAD_CHARACTER;
                    }
                }
            }

            @Data
            @AllArgsConstructor
            class StringType {
                int stringState;
                int prevState;
            }
            Stack<StringType> stringType = new Stack<>();

            void pushStringType(int stringState) {
                stringType.push(new StringType(stringState, yystate()));
                yybegin(stringState);
            }

            void exitStringState() {
                var ss = stringType.pop();
                yybegin(ss.prevState);
            }

            void resumeStringState() {
                var ss = stringType.peek();
                yybegin(ss.stringState);
            }

            final static int PAREN = 0;
            final static int BRACKET = 1;
            @Data
            @AllArgsConstructor
            class StringDelimitedCount {
                int type;
                int count;
            }
            Stack<StringDelimitedCount> stringDelimitedStack = new Stack<>();
            void startDelimitedStringExpression(int type) {
                stringDelimitedStack.push(new StringDelimitedCount(type,0));
                yybegin(INLINE_DELIMITED_STRING_EXPRESSION);
            }

            void inlineDelimitedCountOpen(int type) {
                var top = stringDelimitedStack.peek();
                if (top.type == type) {
                    top.count++;
                }
            }

            boolean shouldExitInlineState(int type) {
                var top = stringDelimitedStack.peek();
                if (top.type == type) {
                    if (top.count == 0) {
                        stringDelimitedStack.pop();
                        resumeStringState();
                        return true;
                    }
                    top.count--;
                }
                return false;
            }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ToitLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 
    return handleEof();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { var res = handleIndent(); if (res != null) return res;
            } 
            // fall through
          case 97: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 98: break;
          case 3: 
            { /* advance to next character */
            } 
            // fall through
          case 99: break;
          case 4: 
            { exitStringState(); return ToitTypes.STRING_END;
            } 
            // fall through
          case 100: break;
          case 5: 
            { yybegin(INLINE_STRING_EXPRESSION); return ToitTypes.STRING_PART;
            } 
            // fall through
          case 101: break;
          case 6: 
            { yypushback(1); resumeStringState();
            } 
            // fall through
          case 102: break;
          case 7: 
            { return ToitTypes.IDENTIFIER;
            } 
            // fall through
          case 103: break;
          case 8: 
            { startDelimitedStringExpression(BRACKET); return ToitTypes.LBRACKET;
            } 
            // fall through
          case 104: break;
          case 9: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 105: break;
          case 10: 
            { return ToitTypes.NEWLINE;
            } 
            // fall through
          case 106: break;
          case 11: 
            { return ToitTypes.SLASH;
            } 
            // fall through
          case 107: break;
          case 12: 
            { return ToitTypes.STAR;
            } 
            // fall through
          case 108: break;
          case 13: 
            { return ToitTypes.MINUS;
            } 
            // fall through
          case 109: break;
          case 14: 
            { return ToitTypes.PERCENT;
            } 
            // fall through
          case 110: break;
          case 15: 
            { return ToitTypes.INTEGER;
            } 
            // fall through
          case 111: break;
          case 16: 
            { return ToitTypes.PLUS;
            } 
            // fall through
          case 112: break;
          case 17: 
            { return ToitTypes.LESS;
            } 
            // fall through
          case 113: break;
          case 18: 
            { return ToitTypes.GREATER;
            } 
            // fall through
          case 114: break;
          case 19: 
            { return ToitTypes.AMPERSAND;
            } 
            // fall through
          case 115: break;
          case 20: 
            { return ToitTypes.TILDE;
            } 
            // fall through
          case 116: break;
          case 21: 
            { return ToitTypes.HAT;
            } 
            // fall through
          case 117: break;
          case 22: 
            { return ToitTypes.QUESTION;
            } 
            // fall through
          case 118: break;
          case 23: 
            { return ToitTypes.COLON;
            } 
            // fall through
          case 119: break;
          case 24: 
            { return ToitTypes.SEMICOLON;
            } 
            // fall through
          case 120: break;
          case 25: 
            { return ToitTypes.EQUALS;
            } 
            // fall through
          case 121: break;
          case 26: 
            { return ToitTypes.PIPE;
            } 
            // fall through
          case 122: break;
          case 27: 
            { return ToitTypes.HASH;
            } 
            // fall through
          case 123: break;
          case 28: 
            { return ToitTypes.COMMA;
            } 
            // fall through
          case 124: break;
          case 29: 
            { return ToitTypes.LCURLY;
            } 
            // fall through
          case 125: break;
          case 30: 
            { return ToitTypes.RCURLY;
            } 
            // fall through
          case 126: break;
          case 31: 
            { pushStringType(STRING_PARSING); return ToitTypes.STRING_START;
            } 
            // fall through
          case 127: break;
          case 32: 
            { inlineDelimitedCountOpen(PAREN); return ToitTypes.LPAREN;
            } 
            // fall through
          case 128: break;
          case 33: 
            { if(!shouldExitInlineState(PAREN)) return ToitTypes.RPAREN;
            } 
            // fall through
          case 129: break;
          case 34: 
            { inlineDelimitedCountOpen(BRACKET); return ToitTypes.LBRACKET;
            } 
            // fall through
          case 130: break;
          case 35: 
            { shouldExitInlineState(BRACKET); return ToitTypes.RBRACKET;
            } 
            // fall through
          case 131: break;
          case 36: 
            { yybegin(INDENT_TRACKING); return ToitTypes.NEWLINE;
            } 
            // fall through
          case 132: break;
          case 37: 
            { return ToitTypes.LPAREN;
            } 
            // fall through
          case 133: break;
          case 38: 
            { return ToitTypes.RPAREN;
            } 
            // fall through
          case 134: break;
          case 39: 
            { return ToitTypes.LBRACKET;
            } 
            // fall through
          case 135: break;
          case 40: 
            { return ToitTypes.RBRACKET;
            } 
            // fall through
          case 136: break;
          case 41: 
            { return ToitTypes.COMMENT;
            } 
            // fall through
          case 137: break;
          case 42: 
            { startDelimitedStringExpression(PAREN); return ToitTypes.STRING_PART;
            } 
            // fall through
          case 138: break;
          case 43: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return ToitTypes.DOT;
            } 
            // fall through
          case 139: break;
          case 44: 
            { return ToitTypes.DIV_ASSIGN;
            } 
            // fall through
          case 140: break;
          case 45: 
            { return ToitTypes.MUL_ASSIGN;
            } 
            // fall through
          case 141: break;
          case 46: 
            { return ToitTypes.MINUS_MINUS;
            } 
            // fall through
          case 142: break;
          case 47: 
            { return ToitTypes.RETURN_TYPE_OPERATOR;
            } 
            // fall through
          case 143: break;
          case 48: 
            { return ToitTypes.SUB_ASSIGN;
            } 
            // fall through
          case 144: break;
          case 49: 
            { return ToitTypes.REMAINDER_ASSIGN;
            } 
            // fall through
          case 145: break;
          case 50: 
            { return ToitTypes.FLOAT;
            } 
            // fall through
          case 146: break;
          case 51: 
            { return ToitTypes.DOT_DOT;
            } 
            // fall through
          case 147: break;
          case 52: 
            { return ToitTypes.PLUS_PLUS;
            } 
            // fall through
          case 148: break;
          case 53: 
            { return ToitTypes.ADD_ASSIGN;
            } 
            // fall through
          case 149: break;
          case 54: 
            { return ToitTypes.AS;
            } 
            // fall through
          case 150: break;
          case 55: 
            { return ToitTypes.LESS_LESS;
            } 
            // fall through
          case 151: break;
          case 56: 
            { return ToitTypes.LESS_OR_EQUALS;
            } 
            // fall through
          case 152: break;
          case 57: 
            { return ToitTypes.GREATER_GREATER;
            } 
            // fall through
          case 153: break;
          case 58: 
            { return ToitTypes.GREATER_OR_EQUALS;
            } 
            // fall through
          case 154: break;
          case 59: 
            { return ToitTypes.AND_ASSIGN;
            } 
            // fall through
          case 155: break;
          case 60: 
            { return ToitTypes.NOT_ASSIGN;
            } 
            // fall through
          case 156: break;
          case 61: 
            { return ToitTypes.COLON_COLON;
            } 
            // fall through
          case 157: break;
          case 62: 
            { return ToitTypes.DECLARE;
            } 
            // fall through
          case 158: break;
          case 63: 
            { return ToitTypes.EQUALS_EQUALS;
            } 
            // fall through
          case 159: break;
          case 64: 
            { return ToitTypes.OR_ASSIGN;
            } 
            // fall through
          case 160: break;
          case 65: 
            { return ToitTypes.NOT_EQUALS;
            } 
            // fall through
          case 161: break;
          case 66: 
            { return ToitTypes.IF;
            } 
            // fall through
          case 162: break;
          case 67: 
            { return ToitTypes.IS;
            } 
            // fall through
          case 163: break;
          case 68: 
            { return ToitTypes.OR;
            } 
            // fall through
          case 164: break;
          case 69: 
            { return ToitTypes.CHARACTER;
            } 
            // fall through
          case 165: break;
          case 70: 
            { return ToitTypes.TRY;
            } 
            // fall through
          case 166: break;
          case 71: 
            { return ToitTypes.FOR;
            } 
            // fall through
          case 167: break;
          case 72: 
            { return ToitTypes.AND;
            } 
            // fall through
          case 168: break;
          case 73: 
            { return ToitTypes.NOT;
            } 
            // fall through
          case 169: break;
          case 74: 
            { return ToitTypes.LESS_LESS_LESS;
            } 
            // fall through
          case 170: break;
          case 75: 
            { return ToitTypes.SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 171: break;
          case 76: 
            { return ToitTypes.GREATER_GREATER_GREATER;
            } 
            // fall through
          case 172: break;
          case 77: 
            { return ToitTypes.SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 173: break;
          case 78: 
            { return ToitTypes.CONST_DECLARE;
            } 
            // fall through
          case 174: break;
          case 79: 
            { pushStringType(TRIPLE_STRING_PARSING); return ToitTypes.STRING_START;
            } 
            // fall through
          case 175: break;
          case 80: 
            { return ToitTypes.BOOLEAN;
            } 
            // fall through
          case 176: break;
          case 81: 
            { return ToitTypes.ELSE;
            } 
            // fall through
          case 177: break;
          case 82: 
            { return ToitTypes.NULL;
            } 
            // fall through
          case 178: break;
          case 83: 
            { return ToitTypes.SHIFT_SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 179: break;
          case 84: 
            { return ToitTypes.BREAK;
            } 
            // fall through
          case 180: break;
          case 85: 
            { return ToitTypes.CLASS;
            } 
            // fall through
          case 181: break;
          case 86: 
            { return ToitTypes.WHILE;
            } 
            // fall through
          case 182: break;
          case 87: 
            { return ToitTypes.RETURN;
            } 
            // fall through
          case 183: break;
          case 88: 
            { return ToitTypes.EXPORT;
            } 
            // fall through
          case 184: break;
          case 89: 
            { return ToitTypes.ASSERT;
            } 
            // fall through
          case 185: break;
          case 90: 
            { return ToitTypes.STATIC;
            } 
            // fall through
          case 186: break;
          case 91: 
            { return ToitTypes.IS_NOT;
            } 
            // fall through
          case 187: break;
          case 92: 
            { return ToitTypes.IMPORT;
            } 
            // fall through
          case 188: break;
          case 93: 
            { return ToitTypes.FINALLY;
            } 
            // fall through
          case 189: break;
          case 94: 
            { return ToitTypes.ABSTRACT;
            } 
            // fall through
          case 190: break;
          case 95: 
            { return ToitTypes.CONTINUE;
            } 
            // fall through
          case 191: break;
          case 96: 
            { return ToitTypes.PRIMITIVE;
            } 
            // fall through
          case 192: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
