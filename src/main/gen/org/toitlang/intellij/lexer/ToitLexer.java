/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.toitlang.intellij.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import lombok.AllArgsConstructor;import lombok.Data;import org.toitlang.intellij.psi.ToitTypes;
import com.intellij.psi.TokenType;
import java.util.Stack;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Toit.flex</tt>
 */
class ToitLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENT_TRACKING = 2;
  public static final int STRING_PARSING = 4;
  public static final int TRIPLE_STRING_PARSING = 6;
  public static final int INLINE_STRING_EXPRESSION = 8;
  public static final int INLINE_DELIMITED_STRING_EXPRESSION = 10;
  public static final int NORMAL = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15616 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\1\1\7\12\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\21\12\12\1\23"+
    "\1\12\1\24\1\23\1\12\1\25\1\23\1\12\1\26\1\27\1\12\1\30\1\31\1\1\1\30\4\12"+
    "\1\32\6\12\1\33\1\34\1\35\1\1\3\12\1\36\6\12\1\15\1\37\2\12\1\40\2\12\1\41"+
    "\1\1\1\12\1\42\4\1\1\12\1\43\1\1\1\44\1\21\7\12\1\45\1\23\1\33\1\46\1\34\1"+
    "\47\1\50\1\51\1\45\1\15\1\52\1\46\1\34\1\53\1\54\1\55\1\56\1\57\1\60\1\21"+
    "\1\34\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\34\1\61\1\66\1\67\1\45\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\56\1\1\1\77\1\100\1\34\1\101\1\102\1\103\1\45"+
    "\1\1\1\77\1\100\1\34\1\104\1\102\1\105\1\45\1\106\1\107\1\100\1\12\1\36\1"+
    "\110\1\111\1\45\1\112\1\113\1\114\1\12\1\115\1\116\1\117\1\56\1\120\1\23\2"+
    "\12\1\30\1\121\1\122\2\1\1\123\1\124\1\125\1\126\1\127\1\130\2\1\1\63\1\131"+
    "\1\122\1\132\1\133\1\12\1\134\1\23\1\135\1\133\1\12\1\134\1\136\3\1\4\12\1"+
    "\122\4\12\1\137\2\12\1\140\2\12\1\141\24\12\1\142\1\143\2\12\1\142\2\12\1"+
    "\144\1\145\1\13\3\12\1\145\3\12\1\36\2\1\1\12\1\1\5\12\1\146\1\23\45\12\1"+
    "\147\1\12\1\23\1\30\4\12\1\150\1\151\1\152\1\153\1\12\1\153\1\12\1\154\1\152"+
    "\1\155\5\12\1\156\1\122\1\1\1\157\1\122\5\12\1\25\2\12\1\30\4\12\1\57\1\12"+
    "\1\121\2\42\1\56\1\12\1\41\1\153\2\12\1\42\1\12\1\160\1\122\2\1\1\12\1\42"+
    "\3\12\1\121\1\12\1\147\2\122\1\161\1\121\4\1\4\12\1\42\1\122\1\162\1\154\3"+
    "\12\1\37\3\12\1\154\3\12\1\25\1\163\1\37\1\12\1\41\1\151\4\1\1\164\1\12\1"+
    "\165\17\12\1\166\21\12\1\146\2\12\1\146\1\167\1\12\1\41\3\12\1\170\1\171\1"+
    "\172\1\134\1\171\3\1\1\173\1\63\1\174\1\1\1\175\1\1\1\134\3\1\2\12\1\63\1"+
    "\176\1\177\1\200\1\201\1\202\1\1\2\12\1\151\62\1\1\203\2\12\1\160\161\1\2"+
    "\12\1\121\2\12\1\121\10\12\1\204\1\154\2\12\1\140\3\12\1\205\1\173\1\12\1"+
    "\206\4\207\2\12\2\1\1\173\35\1\1\210\1\1\1\23\1\211\1\23\4\12\1\212\1\23\4"+
    "\12\1\141\1\213\1\12\1\41\1\23\4\12\1\121\1\1\1\12\1\30\3\1\1\12\40\1\133"+
    "\12\1\57\4\1\135\12\1\57\2\1\10\12\1\134\4\1\2\12\1\41\20\12\1\134\1\12\1"+
    "\214\1\1\3\12\1\215\7\12\1\15\1\1\1\216\1\217\5\12\1\220\1\12\1\121\1\25\3"+
    "\1\1\216\2\12\1\25\1\1\3\12\1\154\4\12\1\57\1\122\1\12\1\221\1\37\1\12\1\41"+
    "\2\12\1\154\1\12\1\134\4\12\1\222\1\122\1\12\1\223\3\12\1\206\1\41\1\122\1"+
    "\12\1\114\4\12\1\31\1\157\1\12\1\224\1\225\1\226\1\207\2\12\1\141\1\57\7\12"+
    "\1\227\1\122\72\12\1\154\1\12\1\230\2\12\1\42\20\1\26\12\1\41\6\12\1\160\2"+
    "\1\1\206\1\231\1\34\1\232\1\233\6\12\1\15\1\1\1\234\25\12\1\41\1\1\4\12\1"+
    "\217\2\12\1\25\2\1\1\42\1\12\1\1\1\12\1\235\1\236\2\1\1\135\7\12\1\134\1\1"+
    "\1\122\1\23\1\237\1\23\1\30\1\203\4\12\1\121\1\240\1\241\2\1\1\242\1\12\1"+
    "\13\1\243\2\41\2\1\7\12\1\30\4\1\3\12\1\153\7\1\1\244\10\1\1\12\1\134\3\12"+
    "\2\63\1\1\2\12\1\1\1\12\1\30\2\12\1\30\1\12\1\41\2\12\1\245\1\246\2\1\11\12"+
    "\1\41\1\122\2\12\1\245\1\12\1\42\2\12\1\25\3\12\1\154\11\1\23\12\1\206\1\12"+
    "\1\57\1\25\11\1\1\247\2\12\1\250\1\12\1\57\1\12\1\206\1\12\1\121\4\1\1\12"+
    "\1\251\1\12\1\57\1\12\1\160\4\1\3\12\1\252\4\1\1\253\1\254\1\12\1\255\2\1"+
    "\1\12\1\134\1\12\1\134\2\1\1\133\1\12\1\206\1\1\3\12\1\57\1\12\1\57\1\12\1"+
    "\31\1\12\1\15\6\1\4\12\1\151\3\1\3\12\1\31\3\12\1\31\60\1\4\12\1\206\1\1\1"+
    "\56\1\173\3\12\1\30\1\1\1\12\1\151\1\122\3\12\1\256\1\1\2\12\1\257\4\12\1"+
    "\260\1\261\2\1\1\12\1\21\1\12\1\262\4\1\1\263\1\26\1\151\3\12\1\30\1\122\1"+
    "\33\1\46\1\34\1\61\1\66\1\264\1\265\1\153\10\1\4\12\1\30\1\122\2\1\4\12\1"+
    "\266\1\122\12\1\3\12\1\267\1\63\1\270\2\1\4\12\1\271\1\122\2\1\3\12\1\25\1"+
    "\122\3\1\1\12\1\101\1\42\1\122\26\1\4\12\1\122\1\173\34\1\3\12\1\151\20\1"+
    "\1\34\2\12\1\13\1\63\1\122\1\1\1\217\1\12\1\217\1\133\1\206\64\1\71\12\1\160"+
    "\6\1\6\12\1\121\1\1\14\12\1\154\53\1\2\12\1\121\75\1\44\12\1\206\33\1\43\12"+
    "\1\151\1\12\1\121\1\122\6\1\1\12\1\41\1\153\3\12\1\206\1\154\1\122\1\234\1"+
    "\272\1\12\67\1\4\12\1\153\2\12\1\121\1\173\1\12\4\1\1\63\1\1\76\12\1\134\1"+
    "\1\57\12\1\31\20\1\1\15\77\1\6\12\1\30\1\134\1\151\1\273\114\1\1\274\1\275"+
    "\1\276\1\1\1\277\11\1\1\300\33\1\5\12\1\135\3\12\1\152\1\301\1\302\1\303\3"+
    "\12\1\304\1\305\1\12\1\306\1\307\1\100\24\12\1\267\1\12\1\100\1\141\1\12\1"+
    "\141\1\12\1\135\1\12\1\135\1\121\1\12\1\121\1\12\1\34\1\12\1\34\1\12\1\310"+
    "\3\311\40\1\3\12\1\230\2\12\1\134\1\312\1\174\1\162\1\23\25\1\1\13\1\220\1"+
    "\313\75\1\14\12\1\153\1\206\2\1\4\12\1\30\1\122\112\1\1\303\1\12\1\314\1\315"+
    "\1\316\1\317\1\320\1\321\1\322\1\42\1\323\1\42\47\1\1\12\1\160\1\12\1\160"+
    "\1\12\1\160\47\1\55\12\1\206\2\1\103\12\1\153\15\12\1\41\150\12\1\15\25\1"+
    "\41\12\1\41\56\1\17\12\41\1");

  /* The ZZ_CMAP_A table has 3392 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\43\1\2\1\0\1\42\1\1\22\0\1\11\1\62\1\77\1\56\1\104\1\10\1\46\1\12"+
    "\1\100\1\101\1\4\1\30\1\57\1\23\1\26\1\3\1\13\1\17\6\15\2\14\1\52\1\53\1\44"+
    "\1\54\1\45\1\51\1\0\1\16\1\25\2\16\1\27\1\16\10\5\1\24\10\5\1\20\2\5\1\102"+
    "\1\7\1\103\1\50\1\21\1\0\1\36\1\65\1\66\1\75\1\34\1\35\1\5\1\74\1\63\1\5\1"+
    "\67\1\37\1\71\1\41\1\64\1\22\1\5\1\32\1\40\1\31\1\33\1\76\1\73\1\72\1\70\1"+
    "\5\1\60\1\55\1\61\1\47\13\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0\12\5\4\0\14"+
    "\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5\1\0\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3"+
    "\5\1\0\1\5\1\0\4\5\1\0\23\5\1\0\11\5\1\0\26\5\2\0\1\5\6\0\10\5\10\0\16\5\1"+
    "\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5\10\0\13\5\5\0\3\5\15\0\12\6\4\0\6\5\1\0\10"+
    "\5\2\0\12\5\1\0\6\5\12\6\3\5\2\0\14\5\2\0\3\5\12\6\14\5\4\0\1\5\5\0\16\5\2"+
    "\0\14\5\4\0\5\5\1\0\10\5\6\0\20\5\2\0\12\6\1\5\2\0\16\5\1\0\1\5\3\0\4\5\2"+
    "\0\11\5\2\0\2\5\2\0\4\5\10\0\1\5\4\0\2\5\1\0\1\5\1\0\3\5\1\0\6\5\4\0\2\5\1"+
    "\0\2\5\1\0\2\5\1\0\2\5\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5\3\0\1\5\7\0\4\5\1\0"+
    "\1\5\7\0\12\6\6\5\13\0\3\5\1\0\11\5\1\0\2\5\1\0\2\5\1\0\5\5\2\0\12\5\1\0\3"+
    "\5\1\0\3\5\2\0\1\5\30\0\1\5\7\0\3\5\1\0\10\5\2\0\6\5\2\0\2\5\2\0\3\5\10\0"+
    "\2\5\4\0\2\5\1\0\1\5\1\0\1\5\20\0\2\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\5\3\0\3\5\1\0\4\5\2\0\1\5\6\0"+
    "\1\5\10\0\4\5\1\0\10\5\1\0\3\5\1\0\30\5\3\0\10\5\1\0\3\5\1\0\4\5\7\0\2\5\1"+
    "\0\3\5\5\0\4\5\1\0\5\5\2\0\4\5\5\0\2\5\7\0\1\5\2\0\2\5\16\0\3\5\1\0\10\5\1"+
    "\0\7\5\1\0\3\5\1\0\5\5\5\0\4\5\7\0\1\5\12\0\6\5\2\0\2\5\1\0\22\5\3\0\10\5"+
    "\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\2\0\2\5\14\0\17"+
    "\5\1\0\12\6\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3"+
    "\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\15\5\1\0\3\5\2\0\5\5\1\0\1\5\1\0\6\5\2\0\12"+
    "\6\2\0\4\5\10\0\2\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0\12\5\1\0\24\5\3\0\5\5\1\0"+
    "\12\5\6\0\1\5\11\0\12\6\4\5\2\0\6\5\1\0\1\5\5\0\1\5\2\0\13\5\1\0\15\5\1\0"+
    "\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\16"+
    "\5\2\0\6\5\2\0\15\5\2\0\14\5\3\0\13\5\7\0\15\5\1\0\7\5\13\0\4\5\14\0\1\5\1"+
    "\0\2\5\14\0\4\5\3\0\1\5\4\0\2\5\15\0\3\5\2\0\12\5\15\0\1\5\23\0\5\5\12\6\3"+
    "\0\6\5\1\0\23\5\1\0\2\5\6\0\6\5\5\0\15\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\6\5\1"+
    "\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\23\0\1\5\4\0\1\5\14\0\1\5\15"+
    "\0\1\5\2\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1"+
    "\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5\7\0\17\5\6\0\15\5\7\0\10\5\11\0\7"+
    "\5\1\0\7\5\6\0\3\5\11\0\5\5\2\0\5\5\3\0\7\5\2\0\2\5\2\0\3\5\5\0\13\5\12\6"+
    "\2\5\4\0\3\5\1\0\12\5\1\0\1\5\7\0\11\5\2\0\27\5\2\0\15\5\3\0\1\5\1\0\1\5\2"+
    "\0\1\5\16\0\1\5\12\6\5\5\3\0\5\5\12\0\6\5\2\0\6\5\2\0\6\5\11\0\13\5\1\0\2"+
    "\5\2\0\7\5\4\0\5\5\3\0\5\5\5\0\12\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\12"+
    "\5\3\0\15\5\3\0\2\5\30\0\16\5\4\0\1\5\2\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0"+
    "\14\5\1\0\16\5\1\0\2\5\1\0\1\5\15\0\1\5\2\0\4\5\4\0\10\5\1\0\5\5\12\0\6\5"+
    "\2\0\1\5\1\0\14\5\1\0\2\5\3\0\1\5\2\0\4\5\1\0\2\5\12\0\10\5\6\0\6\5\1\0\2"+
    "\5\5\0\10\5\1\0\3\5\1\0\13\5\4\0\3\5\4\0\6\5\1\0\12\6\4\5\2\0\1\5\11\0\5\5"+
    "\5\0\3\5\3\0\12\6\1\5\1\0\1\5\3\0\10\5\6\0\1\5\1\0\7\5\1\0\1\5\1\0\4\5\1\0"+
    "\2\5\6\0\1\5\5\0\7\5\2\0\7\5\3\0\6\5\1\0\1\5\10\0\6\5\2\0\10\5\10\0\6\5\2"+
    "\0\1\5\3\0\1\5\13\0\10\5\5\0\15\5\3\0\2\5\6\0\5\5\3\0\6\5\10\0\10\5\2\0\7"+
    "\5\16\0\4\5\4\0\3\5\15\0\1\5\2\0\2\5\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0"+
    "\21\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0\14\5\1\0\4\5\1\0\5\5\1\0\1\5\3\0\11\5\1"+
    "\0\10\5\2\0\22\6\5\0\1\5\12\0\2\5\1\0\2\5\1\0\5\5\6\0\2\5\1\0\1\5\2\0\1\5"+
    "\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1\5\4\0\1\5\1\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5\2"+
    "\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5\1\0\12\5\1\0\5\5\1\0\3\5\1\0\5\5\1"+
    "\0\5\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\2\1\1\2\1\3\1\0\1\4"+
    "\1\5\1\3\1\6\1\7\1\10\1\11\2\12\1\13"+
    "\1\14\1\0\1\15\1\0\2\16\1\17\1\10\1\20"+
    "\7\7\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\0"+
    "\5\7\1\37\1\40\1\41\1\42\1\43\4\44\1\45"+
    "\1\46\1\47\1\50\2\0\1\51\1\3\1\52\1\53"+
    "\1\54\2\0\1\16\10\0\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\7\7\1\64\5\7\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\0\1\77\1\100\1\101\1\7\1\102\4\7\1\0"+
    "\2\103\3\0\2\104\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\60\1\0\1\7\1\105\5\7\1\106"+
    "\1\7\1\107\3\7\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\2\0\5\7\1\116\1\117\2\0\1\120\1\0"+
    "\1\51\1\0\1\121\1\7\1\122\5\7\1\123\1\124"+
    "\2\0\5\7\1\120\4\0\1\120\1\0\2\16\1\0"+
    "\6\7\2\0\1\7\1\125\1\126\1\7\1\127\1\0"+
    "\1\120\2\0\1\130\1\131\1\7\1\132\1\7\1\133"+
    "\1\0\1\134\1\135\1\7\5\0\1\136\1\7\1\0"+
    "\1\7\1\0\1\120\1\0\1\120\1\137\1\0\1\140"+
    "\1\120\1\0\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u019e\0\u0228\0\u026d\0\u02b2\0\u019e\0\u02f7\0\u019e\0\u033c"+
    "\0\u0381\0\u019e\0\u03c6\0\u019e\0\u019e\0\u040b\0\u019e\0\u0450"+
    "\0\u0495\0\u026d\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\u08e5\0\u092a\0\u019e\0\u096f\0\u019e\0\u09b4\0\u019e"+
    "\0\u09f9\0\u0a3e\0\u0a83\0\u019e\0\u019e\0\u019e\0\u0ac8\0\u0b0d"+
    "\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u019e\0\u019e\0\u019e"+
    "\0\u019e\0\u019e\0\u026d\0\u051f\0\u0ac8\0\u019e\0\u019e\0\u019e"+
    "\0\u019e\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u019e\0\u019e\0\u019e"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2"+
    "\0\u0fe7\0\u102c\0\u1071\0\u019e\0\u019e\0\u019e\0\u10b6\0\u019e"+
    "\0\u019e\0\u019e\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c"+
    "\0\u019e\0\u14c1\0\u019e\0\u019e\0\u019e\0\u1506\0\u019e\0\u019e"+
    "\0\u019e\0\u154b\0\u019e\0\u03c6\0\u1590\0\u15d5\0\u03c6\0\u161a"+
    "\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u019e\0\u17b8\0\u17fd"+
    "\0\u1842\0\u019e\0\u0dbf\0\u1887\0\u18cc\0\u1911\0\u0f5d\0\u1956"+
    "\0\u0fa2\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u03c6\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u03c6\0\u1c08\0\u03c6\0\u1c4d\0\u1c92"+
    "\0\u1cd7\0\u03c6\0\u019e\0\u019e\0\u1d1c\0\u019e\0\u019e\0\u1d61"+
    "\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u019e\0\u019e"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u1842\0\u2058\0\u03c6\0\u209d"+
    "\0\u03c6\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u03c6\0\u019e"+
    "\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u019e"+
    "\0\u241e\0\u1fce\0\u2463\0\u24a8\0\u17b8\0\u24ed\0\u019e\0\u2532"+
    "\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a"+
    "\0\u279f\0\u27e4\0\u03c6\0\u03c6\0\u2829\0\u03c6\0\u286e\0\u28b3"+
    "\0\u28f8\0\u293d\0\u03c6\0\u03c6\0\u2982\0\u03c6\0\u29c7\0\u03c6"+
    "\0\u2a0c\0\u019e\0\u03c6\0\u2a51\0\u2a96\0\u2adb\0\u28b3\0\u2b20"+
    "\0\u2b65\0\u03c6\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u1f89\0\u2cbe"+
    "\0\u2a96\0\u03c6\0\u2d03\0\u03c6\0\u286e\0\u2d48\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\3\7\1\13\1\7\1\14"+
    "\30\7\2\14\41\7\7\15\1\16\67\15\1\17\4\15"+
    "\1\20\7\15\1\16\67\15\1\21\4\15\1\20\5\22"+
    "\1\23\10\22\1\23\1\22\3\23\1\22\2\23\1\24"+
    "\1\23\1\22\11\23\21\22\14\23\3\22\1\25\2\22"+
    "\1\0\1\26\1\27\1\30\1\31\1\23\1\0\1\32"+
    "\1\33\1\14\1\34\1\35\2\36\1\23\1\36\3\23"+
    "\1\37\2\23\1\40\1\23\1\41\1\42\1\43\1\23"+
    "\1\44\1\45\1\46\1\23\1\47\1\50\2\14\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\4\23\1\74\3\23\1\75\1\76\1\77"+
    "\1\100\1\101\1\0\1\102\1\26\1\27\1\30\1\31"+
    "\1\23\1\102\1\103\1\33\1\14\1\104\1\35\2\36"+
    "\1\23\1\36\3\23\1\37\2\23\1\40\1\23\1\41"+
    "\1\42\1\43\1\23\1\44\1\45\1\46\1\23\1\47"+
    "\1\50\2\14\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\105\1\70\1\71\1\72\1\73\4\23\1\74\3\23"+
    "\1\75\1\106\1\107\1\110\1\111\1\102\107\0\1\11"+
    "\105\0\1\112\1\113\102\0\1\14\111\0\1\32\1\0"+
    "\1\14\30\0\2\14\41\0\1\15\2\0\102\15\100\0"+
    "\1\114\103\0\1\115\12\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\11\23\21\0\14\23\10\0"+
    "\1\27\105\0\1\112\1\113\47\0\1\116\104\0\1\117"+
    "\104\0\1\120\30\0\7\121\1\122\2\121\1\0\72\121"+
    "\13\0\1\123\1\124\1\123\1\0\1\123\1\125\1\126"+
    "\2\0\1\127\1\130\1\131\1\132\4\0\1\132\27\0"+
    "\1\127\1\130\4\0\1\125\25\0\3\36\1\0\1\36"+
    "\1\0\1\133\4\0\1\131\1\132\4\0\1\132\73\0"+
    "\1\134\21\0\1\135\6\0\1\136\43\0\3\137\1\0"+
    "\1\137\6\0\1\140\106\0\1\141\23\0\1\142\35\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\1\23\1\143\7\23\21\0\14\23\13\0\2\23\4\0"+
    "\10\23\1\0\2\23\1\0\1\23\1\0\3\23\1\144"+
    "\5\23\21\0\14\23\13\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\6\23\1\145\2\23\21\0"+
    "\7\23\1\146\4\23\13\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\5\23\1\147\3\23\21\0"+
    "\1\150\1\151\12\23\13\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\7\23\1\152\1\153\21\0"+
    "\2\23\1\154\11\23\13\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\1\155\10\23\21\0\14\23"+
    "\13\0\2\23\4\0\10\23\1\0\2\23\1\0\1\23"+
    "\1\0\2\23\1\156\6\23\21\0\1\23\1\157\12\23"+
    "\52\0\1\160\7\0\1\161\75\0\1\162\6\0\1\163"+
    "\104\0\1\164\104\0\1\165\102\0\1\166\1\0\1\167"+
    "\104\0\1\170\104\0\1\171\52\0\1\172\136\0\1\173"+
    "\35\0\2\23\4\0\10\23\1\0\2\23\1\0\1\23"+
    "\1\0\4\23\1\174\2\23\1\175\1\23\21\0\6\23"+
    "\1\176\5\23\13\0\2\23\4\0\10\23\1\0\2\23"+
    "\1\0\1\23\1\0\1\23\1\177\7\23\21\0\14\23"+
    "\13\0\2\23\4\0\10\23\1\0\2\23\1\0\1\23"+
    "\1\0\1\23\1\200\7\23\21\0\14\23\13\0\2\23"+
    "\4\0\10\23\1\0\2\23\1\0\1\23\1\0\6\23"+
    "\1\201\2\23\21\0\1\23\1\202\12\23\13\0\2\23"+
    "\4\0\10\23\1\0\2\23\1\0\1\23\1\0\11\23"+
    "\21\0\11\23\1\203\2\23\105\0\1\204\5\0\1\112"+
    "\1\205\1\206\102\112\4\207\1\210\100\207\10\0\1\211"+
    "\173\0\1\17\17\0\1\212\72\0\1\121\2\0\7\121"+
    "\1\213\72\121\13\0\1\123\1\124\1\123\1\0\1\123"+
    "\1\0\1\126\4\0\1\131\1\132\4\0\1\132\63\0"+
    "\3\124\1\0\1\124\1\0\1\214\4\0\1\131\1\132"+
    "\4\0\1\132\63\0\5\215\1\0\1\216\3\0\1\215"+
    "\1\0\1\215\4\0\3\215\26\0\2\215\6\0\1\215"+
    "\22\0\1\123\1\124\1\123\1\0\1\123\100\0\1\217"+
    "\1\0\1\217\1\0\1\217\1\0\1\220\76\0\1\221"+
    "\3\0\1\221\1\0\1\222\76\0\3\137\1\0\1\137"+
    "\100\0\3\223\1\0\1\223\3\0\1\224\4\0\1\224"+
    "\67\0\3\36\1\0\1\36\100\0\3\137\1\0\1\137"+
    "\1\0\1\131\5\0\1\132\4\0\1\132\55\0\2\23"+
    "\4\0\10\23\1\0\2\23\1\0\1\23\1\0\2\23"+
    "\1\225\6\23\21\0\5\23\1\226\6\23\13\0\2\23"+
    "\4\0\10\23\1\0\2\23\1\0\1\23\1\0\1\227"+
    "\10\23\21\0\14\23\13\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\7\23\1\230\1\23\21\0"+
    "\14\23\13\0\2\23\4\0\7\23\1\231\1\0\2\23"+
    "\1\0\1\23\1\0\11\23\21\0\14\23\13\0\2\23"+
    "\4\0\10\23\1\0\2\23\1\0\1\23\1\0\6\23"+
    "\1\232\2\23\21\0\14\23\13\0\2\23\4\0\10\23"+
    "\1\0\2\23\1\0\1\23\1\0\10\23\1\233\21\0"+
    "\14\23\13\0\2\23\4\0\10\23\1\0\2\23\1\0"+
    "\1\23\1\0\1\23\1\234\7\23\21\0\14\23\13\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\7\23\1\235\1\23\21\0\14\23\13\0\2\23\4\0"+
    "\10\23\1\0\2\23\1\0\1\23\1\0\11\23\21\0"+
    "\12\23\1\236\1\23\13\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\7\23\1\237\1\23\21\0"+
    "\14\23\13\0\2\23\4\0\10\23\1\0\2\23\1\0"+
    "\1\23\1\0\5\23\1\240\3\23\21\0\14\23\13\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\6\23\1\241\2\23\21\0\14\23\13\0\2\23\4\0"+
    "\10\23\1\0\2\23\1\0\1\23\1\0\1\242\10\23"+
    "\21\0\14\23\52\0\1\243\7\0\1\244\75\0\1\245"+
    "\6\0\1\246\104\0\1\247\62\0\1\250\57\0\2\23"+
    "\2\0\1\251\1\0\10\23\1\0\2\23\1\0\1\23"+
    "\1\0\11\23\1\0\1\251\17\0\14\23\13\0\2\23"+
    "\4\0\7\23\1\252\1\0\2\23\1\0\1\23\1\0"+
    "\11\23\21\0\14\23\13\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\3\23\1\253\5\23\21\0"+
    "\14\23\13\0\2\23\4\0\10\23\1\0\2\23\1\0"+
    "\1\23\1\0\5\23\1\254\3\23\21\0\14\23\13\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\10\23\1\255\21\0\14\23\13\0\2\23\4\0\10\23"+
    "\1\0\2\23\1\0\1\23\1\0\11\23\21\0\1\256"+
    "\13\23\105\0\1\257\7\0\1\260\102\0\4\207\1\261"+
    "\100\207\3\262\1\263\1\264\100\262\11\265\1\0\73\265"+
    "\13\0\3\124\1\0\1\124\100\0\5\215\1\0\1\216"+
    "\1\266\2\0\1\215\1\0\1\215\4\0\3\215\26\0"+
    "\2\215\6\0\1\215\22\0\5\215\5\0\1\215\1\0"+
    "\1\215\4\0\3\215\26\0\2\215\6\0\1\215\22\0"+
    "\1\217\1\0\1\217\1\0\1\217\100\0\1\221\3\0"+
    "\1\221\100\0\3\223\1\0\1\223\1\0\1\224\76\0"+
    "\3\223\1\0\1\223\72\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\3\23\1\267\5\23\21\0"+
    "\14\23\13\0\2\23\4\0\10\23\1\0\2\23\1\0"+
    "\1\23\1\0\2\23\1\270\6\23\21\0\14\23\13\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\3\23\1\271\5\23\21\0\14\23\13\0\2\23\4\0"+
    "\10\23\1\0\2\23\1\0\1\23\1\0\11\23\21\0"+
    "\1\23\1\272\12\23\13\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\7\23\1\225\1\23\21\0"+
    "\14\23\13\0\2\23\4\0\10\23\1\0\2\23\1\0"+
    "\1\23\1\0\5\23\1\273\3\23\21\0\14\23\13\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\3\23\1\274\5\23\21\0\14\23\13\0\2\23\4\0"+
    "\10\23\1\0\2\23\1\0\1\23\1\0\1\275\10\23"+
    "\21\0\14\23\13\0\2\23\4\0\10\23\1\0\2\23"+
    "\1\0\1\23\1\0\1\276\10\23\21\0\14\23\13\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\6\23\1\277\2\23\21\0\14\23\62\0\1\300\113\0"+
    "\1\301\32\0\1\251\27\0\1\302\1\0\1\251\46\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\11\23\21\0\1\23\1\303\12\23\13\0\2\23\4\0"+
    "\10\23\1\0\2\23\1\0\1\23\1\0\5\23\1\304"+
    "\3\23\21\0\14\23\13\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\7\23\1\305\1\23\21\0"+
    "\14\23\13\0\2\23\4\0\10\23\1\0\2\23\1\0"+
    "\1\23\1\0\1\306\10\23\21\0\14\23\13\0\2\23"+
    "\4\0\10\23\1\0\2\23\1\0\1\23\1\0\6\23"+
    "\1\307\2\23\21\0\14\23\6\0\3\207\1\310\1\311"+
    "\100\207\3\262\1\312\1\313\103\262\1\312\1\314\103\262"+
    "\1\315\1\316\100\262\13\0\1\317\2\320\1\0\1\320"+
    "\3\0\1\321\66\0\2\23\4\0\10\23\1\0\2\23"+
    "\1\0\1\23\1\0\1\23\1\322\7\23\21\0\14\23"+
    "\13\0\2\23\4\0\10\23\1\0\2\23\1\0\1\23"+
    "\1\0\1\23\1\323\7\23\21\0\14\23\13\0\2\23"+
    "\4\0\10\23\1\0\2\23\1\0\1\23\1\0\6\23"+
    "\1\324\2\23\21\0\14\23\13\0\2\23\4\0\10\23"+
    "\1\0\2\23\1\0\1\23\1\0\1\23\1\325\7\23"+
    "\21\0\14\23\13\0\2\23\4\0\10\23\1\0\2\23"+
    "\1\0\1\23\1\0\1\23\1\326\7\23\21\0\14\23"+
    "\13\0\2\23\4\0\10\23\1\0\2\23\1\0\1\23"+
    "\1\0\11\23\21\0\1\327\13\23\77\0\1\330\77\0"+
    "\1\331\25\0\2\23\4\0\10\23\1\0\2\23\1\0"+
    "\1\23\1\0\1\23\1\332\7\23\21\0\14\23\13\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\11\23\21\0\4\23\1\333\7\23\13\0\2\23\4\0"+
    "\10\23\1\0\2\23\1\0\1\23\1\0\7\23\1\334"+
    "\1\23\21\0\14\23\13\0\2\23\4\0\10\23\1\0"+
    "\2\23\1\0\1\23\1\0\11\23\21\0\1\335\13\23"+
    "\13\0\2\23\4\0\10\23\1\0\2\23\1\0\1\23"+
    "\1\0\3\23\1\336\5\23\21\0\14\23\6\0\3\207"+
    "\1\315\1\311\100\207\3\262\1\310\1\316\100\262\3\337"+
    "\1\340\1\341\100\337\3\262\1\263\1\316\100\262\13\0"+
    "\3\320\1\0\1\320\1\0\1\342\76\0\1\317\2\320"+
    "\1\0\1\320\72\0\2\23\4\0\10\23\1\0\2\23"+
    "\1\0\1\23\1\0\10\23\1\343\21\0\14\23\13\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\1\344\10\23\21\0\14\23\13\0\2\23\4\0\10\23"+
    "\1\0\2\23\1\0\1\23\1\0\6\23\1\345\2\23"+
    "\21\0\14\23\13\0\2\23\4\0\10\23\1\0\2\23"+
    "\1\0\1\23\1\0\1\346\10\23\21\0\14\23\13\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\5\23\1\347\3\23\21\0\14\23\13\0\2\23\4\0"+
    "\10\23\1\0\2\23\1\0\1\23\1\0\11\23\21\0"+
    "\3\23\1\350\10\23\71\0\1\351\52\0\1\352\60\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\1\353\10\23\21\0\14\23\13\0\2\23\4\0\10\23"+
    "\1\0\2\23\1\0\1\23\1\0\10\23\1\354\21\0"+
    "\14\23\6\0\3\337\1\355\1\356\100\337\4\357\1\360"+
    "\100\357\3\337\1\263\1\361\100\337\13\0\3\320\1\0"+
    "\1\320\72\0\2\23\4\0\10\23\1\0\2\23\1\0"+
    "\1\23\1\0\11\23\21\0\5\23\1\362\6\23\13\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\11\23\21\0\3\23\1\363\10\23\37\0\1\364\60\0"+
    "\2\23\4\0\10\23\1\0\2\23\1\0\1\23\1\0"+
    "\2\23\1\365\6\23\21\0\14\23\6\0\3\337\1\355"+
    "\1\366\103\337\1\367\1\361\100\337\3\357\1\262\1\370"+
    "\100\357\3\337\1\371\1\361\100\337\5\0\2\23\4\0"+
    "\10\23\1\0\2\23\1\0\1\23\1\0\1\372\10\23"+
    "\21\0\14\23\71\0\1\373\26\0\2\23\4\0\10\23"+
    "\1\0\2\23\1\0\1\23\1\0\3\23\1\374\5\23"+
    "\21\0\14\23\6\0\3\337\1\375\1\361\100\337\3\357"+
    "\1\337\1\370\100\357\76\0\1\376\42\0\1\377\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11661];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\1\11\3\1\1\11\1\0\1\11"+
    "\2\1\1\11\1\1\2\11\1\1\1\11\2\1\1\0"+
    "\1\1\1\0\17\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\3\11\1\0\6\1\5\11\3\1\4\11\2\0"+
    "\2\1\3\11\2\0\1\1\10\0\3\11\1\1\3\11"+
    "\16\1\1\11\1\1\3\11\1\1\3\11\1\0\1\11"+
    "\10\1\1\0\1\1\1\11\3\0\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\16\1\2\11\1\1\2\11\2\0\5\1\2\11\2\0"+
    "\1\1\1\0\1\1\1\0\11\1\1\11\2\0\5\1"+
    "\1\11\4\0\1\1\1\0\1\11\1\1\1\0\6\1"+
    "\2\0\5\1\1\0\1\1\2\0\6\1\1\0\1\11"+
    "\2\1\5\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   int yyline;
            int yycolumn;

            Stack<Integer> indentStack = new Stack<>();

            public int getIndenStackSize() { return indentStack.size(); }
            IElementType indentOut() {
                indentStack.pop();
                return ToitTypes.DEDENT;
            }
            IElementType indentIn() {
                indentStack.push(yycolumn);
                yybegin(NORMAL);
                return ToitTypes.INDENT;
            }
            IElementType indentIgnore() {
                yybegin(NORMAL);
                return null;
            }

            IElementType handleIndent() {
               yypushback(1);
               if (indentStack.isEmpty()) {
                  if (yycolumn > 0) {
                      // No indents recorded and non-space in first column. Record indent and return to normal mode
                      return indentIn();
                  }
                  return indentIgnore();
               }

               int previousIndent = indentStack.peek();
               if (previousIndent == yycolumn) {
                   // At same indentation level, so return to normal mode
                   return indentIgnore();
               }

               if (previousIndent < yycolumn) {
                   // Indent in detected, record it on the stack
                   return indentIn();
               }

               // Indent out
               return indentOut();
            };

            IElementType handleEof() {
                if (yystate() != INDENT_TRACKING) {
                    yybegin(INDENT_TRACKING);
                    return ToitTypes.NEWLINE;
                } else {
                    if (indentStack.isEmpty()) return null;
                    indentStack.pop();
                    return ToitTypes.DEDENT;
                }
            }
            @Data
            @AllArgsConstructor
            class StringType {
                int stringState;
                int prevState;
            }
            Stack<StringType> stringType = new Stack<>();

            void pushStringType(int stringState) {
                stringType.push(new StringType(stringState, yystate()));
                yybegin(stringState);
            }

            void exitStringState() {
                var ss = stringType.pop();
                yybegin(ss.prevState);
            }

            void resumeStringState() {
                var ss = stringType.peek();
                yybegin(ss.stringState);
            }

            final static int PAREN = 0;
            final static int BRACKET = 1;
            @Data
            @AllArgsConstructor
            class StringDelimitedCount {
                int type;
                int count;
            }
            Stack<StringDelimitedCount> stringDelimitedStack = new Stack<>();
            void startDelimitedStringExpression(int type) {
                stringDelimitedStack.push(new StringDelimitedCount(type,0));
                yybegin(INLINE_DELIMITED_STRING_EXPRESSION);
            }

            void inlineDelimitedCountOpen(int type) {
                var top = stringDelimitedStack.peek();
                if (top.type == type) {
                    top.count++;
                }
            }

            boolean shouldExitInlineState(int type) {
                var top = stringDelimitedStack.peek();
                if (top.type == type) {
                    if (top.count == 0) {
                        stringDelimitedStack.pop();
                        resumeStringState();
                        return true;
                    }
                    top.count--;
                }
                return false;
            }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ToitLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 
    return handleEof();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { var res = handleIndent(); if (res != null) return res;
            } 
            // fall through
          case 98: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 99: break;
          case 3: 
            { /* advance to next character */
            } 
            // fall through
          case 100: break;
          case 4: 
            { exitStringState(); return ToitTypes.STRING_END;
            } 
            // fall through
          case 101: break;
          case 5: 
            { yybegin(INLINE_STRING_EXPRESSION); return ToitTypes.STRING_PART;
            } 
            // fall through
          case 102: break;
          case 6: 
            { yypushback(1); resumeStringState();
            } 
            // fall through
          case 103: break;
          case 7: 
            { return ToitTypes.IDENTIFIER;
            } 
            // fall through
          case 104: break;
          case 8: 
            { return ToitTypes.DOT;
            } 
            // fall through
          case 105: break;
          case 9: 
            { startDelimitedStringExpression(BRACKET); return ToitTypes.LBRACKET;
            } 
            // fall through
          case 106: break;
          case 10: 
            { yybegin(INDENT_TRACKING); return ToitTypes.NEWLINE;
            } 
            // fall through
          case 107: break;
          case 11: 
            { return ToitTypes.SLASH;
            } 
            // fall through
          case 108: break;
          case 12: 
            { return ToitTypes.STAR;
            } 
            // fall through
          case 109: break;
          case 13: 
            { return ToitTypes.PERCENT;
            } 
            // fall through
          case 110: break;
          case 14: 
            { return ToitTypes.INTEGER;
            } 
            // fall through
          case 111: break;
          case 15: 
            { return ToitTypes.MINUS;
            } 
            // fall through
          case 112: break;
          case 16: 
            { return ToitTypes.PLUS;
            } 
            // fall through
          case 113: break;
          case 17: 
            { return ToitTypes.LESS;
            } 
            // fall through
          case 114: break;
          case 18: 
            { return ToitTypes.GREATER;
            } 
            // fall through
          case 115: break;
          case 19: 
            { return ToitTypes.AMPERSAND;
            } 
            // fall through
          case 116: break;
          case 20: 
            { return ToitTypes.TILDE;
            } 
            // fall through
          case 117: break;
          case 21: 
            { return ToitTypes.HAT;
            } 
            // fall through
          case 118: break;
          case 22: 
            { return ToitTypes.QUESTION;
            } 
            // fall through
          case 119: break;
          case 23: 
            { return ToitTypes.COLON;
            } 
            // fall through
          case 120: break;
          case 24: 
            { return ToitTypes.SEMICOLON;
            } 
            // fall through
          case 121: break;
          case 25: 
            { return ToitTypes.EQUALS;
            } 
            // fall through
          case 122: break;
          case 26: 
            { return ToitTypes.PIPE;
            } 
            // fall through
          case 123: break;
          case 27: 
            { return ToitTypes.HASH;
            } 
            // fall through
          case 124: break;
          case 28: 
            { return ToitTypes.COMMA;
            } 
            // fall through
          case 125: break;
          case 29: 
            { return ToitTypes.LCURLY;
            } 
            // fall through
          case 126: break;
          case 30: 
            { return ToitTypes.RCURLY;
            } 
            // fall through
          case 127: break;
          case 31: 
            { pushStringType(STRING_PARSING); return ToitTypes.STRING_START;
            } 
            // fall through
          case 128: break;
          case 32: 
            { inlineDelimitedCountOpen(PAREN); return ToitTypes.LPAREN;
            } 
            // fall through
          case 129: break;
          case 33: 
            { if(!shouldExitInlineState(PAREN)) return ToitTypes.RPAREN;
            } 
            // fall through
          case 130: break;
          case 34: 
            { inlineDelimitedCountOpen(BRACKET); return ToitTypes.LBRACKET;
            } 
            // fall through
          case 131: break;
          case 35: 
            { shouldExitInlineState(BRACKET); return ToitTypes.RBRACKET;
            } 
            // fall through
          case 132: break;
          case 36: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 133: break;
          case 37: 
            { return ToitTypes.LPAREN;
            } 
            // fall through
          case 134: break;
          case 38: 
            { return ToitTypes.RPAREN;
            } 
            // fall through
          case 135: break;
          case 39: 
            { return ToitTypes.LBRACKET;
            } 
            // fall through
          case 136: break;
          case 40: 
            { return ToitTypes.RBRACKET;
            } 
            // fall through
          case 137: break;
          case 41: 
            { startDelimitedStringExpression(PAREN); return ToitTypes.STRING_PART;
            } 
            // fall through
          case 138: break;
          case 42: 
            { return ToitTypes.DIV_ASSIGN;
            } 
            // fall through
          case 139: break;
          case 43: 
            { return ToitTypes.MUL_ASSIGN;
            } 
            // fall through
          case 140: break;
          case 44: 
            { return ToitTypes.REMAINDER_ASSIGN;
            } 
            // fall through
          case 141: break;
          case 45: 
            { return ToitTypes.MINUS_MINUS;
            } 
            // fall through
          case 142: break;
          case 46: 
            { return ToitTypes.RETURN_TYPE;
            } 
            // fall through
          case 143: break;
          case 47: 
            { return ToitTypes.SUB_ASSIGN;
            } 
            // fall through
          case 144: break;
          case 48: 
            { return ToitTypes.FLOAT;
            } 
            // fall through
          case 145: break;
          case 49: 
            { return ToitTypes.DOT_DOT;
            } 
            // fall through
          case 146: break;
          case 50: 
            { return ToitTypes.PLUS_PLUS;
            } 
            // fall through
          case 147: break;
          case 51: 
            { return ToitTypes.ADD_ASSIGN;
            } 
            // fall through
          case 148: break;
          case 52: 
            { return ToitTypes.AS;
            } 
            // fall through
          case 149: break;
          case 53: 
            { return ToitTypes.LESS_LESS;
            } 
            // fall through
          case 150: break;
          case 54: 
            { return ToitTypes.LESS_OR_EQUALS;
            } 
            // fall through
          case 151: break;
          case 55: 
            { return ToitTypes.GREATER_GREATER;
            } 
            // fall through
          case 152: break;
          case 56: 
            { return ToitTypes.GREATER_OR_EQUALS;
            } 
            // fall through
          case 153: break;
          case 57: 
            { return ToitTypes.AND_ASSIGN;
            } 
            // fall through
          case 154: break;
          case 58: 
            { return ToitTypes.NOT_ASSIGN;
            } 
            // fall through
          case 155: break;
          case 59: 
            { return ToitTypes.COLON_COLON;
            } 
            // fall through
          case 156: break;
          case 60: 
            { return ToitTypes.DECLARE;
            } 
            // fall through
          case 157: break;
          case 61: 
            { return ToitTypes.EQUALS_EQUALS;
            } 
            // fall through
          case 158: break;
          case 62: 
            { return ToitTypes.OR_ASSIGN;
            } 
            // fall through
          case 159: break;
          case 63: 
            { return ToitTypes.NOT_EQUALS;
            } 
            // fall through
          case 160: break;
          case 64: 
            { return ToitTypes.IF;
            } 
            // fall through
          case 161: break;
          case 65: 
            { return ToitTypes.IS;
            } 
            // fall through
          case 162: break;
          case 66: 
            { return ToitTypes.OR;
            } 
            // fall through
          case 163: break;
          case 67: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return ToitTypes.COMMENT;
            } 
            // fall through
          case 164: break;
          case 68: 
            { return ToitTypes.CHARACTER;
            } 
            // fall through
          case 165: break;
          case 69: 
            { return ToitTypes.TRY;
            } 
            // fall through
          case 166: break;
          case 70: 
            { return ToitTypes.FOR;
            } 
            // fall through
          case 167: break;
          case 71: 
            { return ToitTypes.AND;
            } 
            // fall through
          case 168: break;
          case 72: 
            { return ToitTypes.NOT;
            } 
            // fall through
          case 169: break;
          case 73: 
            { return ToitTypes.LESS_LESS_LESS;
            } 
            // fall through
          case 170: break;
          case 74: 
            { return ToitTypes.SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 171: break;
          case 75: 
            { return ToitTypes.GREATER_GREATER_GREATER;
            } 
            // fall through
          case 172: break;
          case 76: 
            { return ToitTypes.SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 173: break;
          case 77: 
            { return ToitTypes.CONST_DECLARE;
            } 
            // fall through
          case 174: break;
          case 78: 
            { pushStringType(TRIPLE_STRING_PARSING); return ToitTypes.STRING_START;
            } 
            // fall through
          case 175: break;
          case 79: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return ToitTypes.COMMENT;
            } 
            // fall through
          case 176: break;
          case 80: 
            { return ToitTypes.COMMENT;
            } 
            // fall through
          case 177: break;
          case 81: 
            { return ToitTypes.BOOLEAN;
            } 
            // fall through
          case 178: break;
          case 82: 
            { return ToitTypes.ELSE;
            } 
            // fall through
          case 179: break;
          case 83: 
            { return ToitTypes.NULL;
            } 
            // fall through
          case 180: break;
          case 84: 
            { return ToitTypes.SHIFT_SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 181: break;
          case 85: 
            { return ToitTypes.BREAK;
            } 
            // fall through
          case 182: break;
          case 86: 
            { return ToitTypes.CLASS;
            } 
            // fall through
          case 183: break;
          case 87: 
            { return ToitTypes.WHILE;
            } 
            // fall through
          case 184: break;
          case 88: 
            { return ToitTypes.RETURN;
            } 
            // fall through
          case 185: break;
          case 89: 
            { return ToitTypes.EXPORT;
            } 
            // fall through
          case 186: break;
          case 90: 
            { return ToitTypes.ASSERT;
            } 
            // fall through
          case 187: break;
          case 91: 
            { return ToitTypes.STATIC;
            } 
            // fall through
          case 188: break;
          case 92: 
            { return ToitTypes.IS_NOT;
            } 
            // fall through
          case 189: break;
          case 93: 
            { return ToitTypes.IMPORT;
            } 
            // fall through
          case 190: break;
          case 94: 
            { return ToitTypes.FINALLY;
            } 
            // fall through
          case 191: break;
          case 95: 
            { return ToitTypes.ABSTRACT;
            } 
            // fall through
          case 192: break;
          case 96: 
            { return ToitTypes.CONTINUE;
            } 
            // fall through
          case 193: break;
          case 97: 
            { return ToitTypes.PRIMITIVE;
            } 
            // fall through
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
